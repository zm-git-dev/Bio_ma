# 1、计算等位基因频率
# 转换为tped格式，生成sample.tped和sample.tfam文件。
vcftools --vcf QC.sample-select-geno005-maf003.vcf --plink-tped --out sample

sample.tfam修改第一列数据为breed ID。

#提取文件sample.pop.cov，格式为：共三列，前两列与修改后的sample.tfam前两列一样，为群体ID和样本ID，第三列和第一列一致，tab分隔。
cat sample.tfam |awk '{print $1"\t"$2"\t"$1}' >sample.pop.cov

#计算等位基因组的频率，生成plink.frq.strat和plink.nosex文件
plink --threads 12 --tfile sample --freq --allow-extra-chr --chr-set 29 --within sample.pop.cov 

#压缩等位基因频率文件
gzip plink.frq.strat 

#转换格式【耗时小时计】
#用treemix自带脚本进行格式转换，notes：输入输出都为压缩文件，plink2treemix.py使用python2并需要绝对路径（否则报错）。
python2 /home/sll/miniconda3/bin/plink2treemix.py plink.frq.strat.gz sample.treemix.in.gz 

# 2、treemix推断基因流
# 多次分析以评估最佳m值
比如m取1-10(常用1-5,1-10)，每个m值重复5次(至少两次)

for m in {1..5}
do
	{
	for i in {1..5}
	do
		{
		   treemix -i sample.treemix.in.gz -o sample.${m}.${i} -bootstrap 100 -root wBGU -m ${m} -k 500 -noss
		}
	done
	}
done

-i 指定基因频率输入文件
-o 指定输出文件前缀
-tf      【可选】指定树文件，指定后就使用指定树的拓扑结构(最好把支持率和其他无关信息都删除，只留最简单的Newick格式)，否则treemix会推断拓扑
-root    指定外类群(指定的是居群名称)，多个用逗号分隔；最好指定，否则后面plot_tree画树没找到更换外类群的参数会很麻烦
-m       为the number of migration edges即基因渗入的次数
-k 1000  因为SNP之间不是独立位点，为了避免连锁不平衡，用k参数指定SNP数量有连锁，比如这里指定用1000个SNP组成的blocks评估协方差矩阵
-se      计算迁移权重的标准误差(计算成本高)，如果想省时间可以不用这个参数
-bootstrap 为了判断给定树拓扑的可信度，在blocks运行bootstrap重复
-global  在增加所有种群后做一轮全局重组。
-noss    关闭样本量校正。TreeMix计算协方差会考虑每个种群的样本量，有些情况(如果有种群的样本只有1个)会过度校正，可以关闭。
-g old.vertices.gz old.edges.gz #使用之前生成的树和图结果，用-g指定之前的两个结果文件
-cor_mig known_events and -climb #合并已知的迁移事件


# 3、 最佳迁移边缘个数选择
# 将生成的llik、cov、modelcov文件放置在同一文件夹，使用R包OptM分析：

library(OptM)
linear = optM("./data") ##文件夹名
plot_optM(linear)

# 生成图中，当Δm值最小时的migration edges为最佳迁移边缘个数


# 4、基因渗入作图
# 使用m=最佳迁移边缘个数结果文件做图

source("plotting_funcs.R") #treemix scr文件夹中R脚本
plot_tree("TreeMix") #TreeMix为结果文件前缀

##===== 绘制混合树====
prefix="sample.3"  ## treemix产生的结果文件前缀
library(RColorBrewer)
library(R.utils)
 par(mfrow=c(2,3))
 for(edge in 1:3){
   plot_tree(cex=0.8,paste0(prefix,".",edge))
   title(paste(edge,"repetition"))
} # 放的是m012345，则0:5

